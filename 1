import React, { useState } from 'react';
import './FilterForm.css';
import { postFilterData } from '../services/api';

export default function FilterForm() {
  const [formData, setFormData] = useState({
    neid: '',
    time: '15 min',
    calendar: '',
    fromHr: '1',
    toHr: '2',
    fromMin: '1',
    toMin: '2',
    portNumber: '',
    monType: ''
  });

  const [showTimestamp, setShowTimestamp] = useState(false);
  const [showPortNumber, setShowPortNumber] = useState(false);
  const [showMonType, setShowMonType] = useState(false);

  // Dropdown options based on time selection
  const startHours = Array.from({ length: 23 }, (_, i) => i + 1); // 1 to 23
  const endHours = Array.from({ length: 23 }, (_, i) => i + 2);   // 2 to 24

  const startMinutes = Array.from({ length: 14 }, (_, i) => i + 1); // 1 to 14
  const endMinutes = Array.from({ length: 14 }, (_, i) => i + 2);   // 2 to 15

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await postFilterData(formData);
      console.log('Submitted:', response);
    } catch (error) {
      console.error('Submit Error:', error);
    }
  };

  return (
    <form className="form-container" onSubmit={handleSubmit}>
      <div className="form-group">
        <label className="label-bold">Neid:</label>
        <input type="text" name="neid" value={formData.neid} onChange={handleChange} className="input-box" />
      </div>

      <div className="form-group">
        <label className="label-bold">Time:</label>
        <select name="time" value={formData.time} onChange={handleChange} className="input-box">
          <option value="15 min">15 min</option>
          <option value="24 hrs">24 hrs</option>
        </select>
      </div>

      <h3 className="section-title">Filter</h3>

      <label>
        <input type="checkbox" onChange={() => setShowTimestamp(!showTimestamp)} /> Timestamp
      </label>

      {showTimestamp && (
        <>
          <input
            type="date"
            name="calendar"
            value={formData.calendar}
            onChange={handleChange}
            className="input-box"
          />

          {/* Show hours dropdowns only for 24 hrs */}
          {formData.time === '24 hrs' && (
            <div className="row-group">
              <label>From (hrs):</label>
              <select name="fromHr" value={formData.fromHr} onChange={handleChange} className="input-small">
                {startHours.map((hr) => (
                  <option key={hr} value={hr}>{hr}</option>
                ))}
              </select>

              <label>To (hrs):</label>
              <select name="toHr" value={formData.toHr} onChange={handleChange} className="input-small">
                {endHours.map((hr) => (
                  <option key={hr} value={hr}>{hr}</option>
                ))}
              </select>
            </div>
          )}

          {/* Show minutes dropdowns only for 15 min */}
          {formData.time === '15 min' && (
            <div className="row-group">
              <label>From (min):</label>
              <select name="fromMin" value={formData.fromMin} onChange={handleChange} className="input-small">
                {startMinutes.map((min) => (
                  <option key={min} value={min}>{min}</option>
                ))}
              </select>

              <label>To (min):</label>
              <select name="toMin" value={formData.toMin} onChange={handleChange} className="input-small">
                {endMinutes.map((min) => (
                  <option key={min} value={min}>{min}</option>
                ))}
              </select>
            </div>
          )}
        </>
      )}

      <label>
        <input type="checkbox" onChange={() => setShowPortNumber(!showPortNumber)} /> Port Number
      </label>
      {showPortNumber && (
        <input type="text" name="portNumber" value={formData.portNumber} onChange={handleChange} className="input-box" />
      )}

      <label>
        <input type="checkbox" onChange={() => setShowMonType(!showMonType)} /> Mon Type
      </label>
      {showMonType && (
        <input type="text" name="monType" value={formData.monType} onChange={handleChange} className="input-box" />
      )}

      <button type="submit" className="submit-button">Submit</button>
    </form>
  );
}
