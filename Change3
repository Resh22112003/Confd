To ensure that each API only accepts and stores the expected fields (and avoids storing null or unrelated fields), the cleanest solution is to define separate DTOs for each API. Here's how we can structure it:


---

1. Create Separate DTOs

FormNeidDTO.java (for API 1)

package com.UI.DTO;

public class FormNeidDTO {
    private String neid;

    public String getNeid() {
        return neid;
    }

    public void setNeid(String neid) {
        this.neid = neid;
    }
}

FormTimestampPortDTO.java (for API 2)

package com.UI.DTO;

public class FormTimestampPortDTO {
    private String neid;
    private String timeRange;
    private String calendarDate;
    private String minuteFrom;
    private String minuteTo;
    private String portNumber;

    // Getters and Setters
    public String getNeid() { return neid; }
    public void setNeid(String neid) { this.neid = neid; }

    public String getTimeRange() { return timeRange; }
    public void setTimeRange(String timeRange) { this.timeRange = timeRange; }

    public String getCalendarDate() { return calendarDate; }
    public void setCalendarDate(String calendarDate) { this.calendarDate = calendarDate; }

    public String getMinuteFrom() { return minuteFrom; }
    public void setMinuteFrom(String minuteFrom) { this.minuteFrom = minuteFrom; }

    public String getMinuteTo() { return minuteTo; }
    public void setMinuteTo(String minuteTo) { this.minuteTo = minuteTo; }

    public String getPortNumber() { return portNumber; }
    public void setPortNumber(String portNumber) { this.portNumber = portNumber; }
}

FormFullDTO.java (for API 3)

package com.UI.DTO;

public class FormFullDTO extends FormTimestampPortDTO {
    private String monType;

    public String getMonType() {
        return monType;
    }

    public void setMonType(String monType) {
        this.monType = monType;
    }
}


---

2. Updated FormDataController.java

package com.UI.Controller;

import com.UI.DTO.*;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class FormDataController {

    private final Map<String, Object> formDataMap = new HashMap<>();

    // API 1 - Only NEID
    @PostMapping("/endpoint1")
    public String submitNeidOnly(@RequestBody FormNeidDTO formData) {
        formDataMap.put(formData.getNeid(), formData);
        System.out.println("API 1 - Stored NEID: " + formData.getNeid());
        return "Stored NEID: " + formData.getNeid();
    }

    // API 2 - Timestamp + Port
    @PostMapping("/endpoint2")
    public String submitTimestampPort(@RequestBody FormTimestampPortDTO formData) {
        formDataMap.put(formData.getNeid(), formData);
        System.out.println("API 2 - Stored Timestamp + Port Data: " + formData);
        return "Stored data for NEID: " + formData.getNeid();
    }

    // API 3 - Timestamp + Port + MonType
    @PostMapping("/endpoint3")
    public String submitFullData(@RequestBody FormFullDTO formData) {
        formDataMap.put(formData.getNeid(), formData);
        System.out.println("API 3 - Stored Full Data: " + formData);
        return "Stored full data for NEID: " + formData.getNeid();
    }

    // To fetch all records (can be improved to typecast and segregate)
    @GetMapping("/form-data")
    public Collection<Object> getAllFormData() {
        return formDataMap.values();
    }
}


---

This approach ensures:

Strict field control: Each endpoint only allows the required fields.

No null fields from extra inputs.

Extensibility: You can validate required fields, or add annotations like @NotNull later for validation.


Would you like me to update your React frontend code to call these specific endpoints too?

