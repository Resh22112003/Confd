Sure! Here's how you can split the React code into separate files:


---

✅ 1. DataTable.jsx – The Main Component

// src/components/DataTable.jsx
import React, { useEffect, useState } from "react";
import { fetchSreenaData } from "../services/api";
import "../styles/DataTable.css";

const DataTable = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetchSreenaData()
      .then((json) => setData(json))
      .catch((err) => console.error("Error fetching data:", err));
  }, []);

  const downloadCSV = () => {
    if (!data || data.length === 0) return;

    const headers = Object.keys(data[0]);
    const csvRows = [
      headers.join(","),
      ...data.map((row) =>
        headers.map((field) => JSON.stringify(row[field] ?? "")).join(",")
      ),
    ];
    const csvString = csvRows.join("\n");

    const blob = new Blob([csvString], { type: "text/csv" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "sreena_data.csv";
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="table-wrapper">
      <h1 className="table-title">Sreena Data Table</h1>

      {data.length > 0 ? (
        <>
          <table className="data-table">
            <thead>
              <tr>
                {Object.keys(data[0]).map((key) => (
                  <th key={key}>{key}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.map((row, idx) => (
                <tr key={idx}>
                  {Object.keys(row).map((key) => (
                    <td key={key}>{row[key]}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          <button className="download-btn" onClick={downloadCSV}>
            Download CSV
          </button>
        </>
      ) : (
        <p>Loading data...</p>
      )}
    </div>
  );
};

export default DataTable;


---

✅ 2. api.js – API Access File

// src/services/api.js

export const fetchSreenaData = async () => {
  const response = await fetch("https://your-sreena-endpoint.com/data"); // Replace with real endpoint
  if (!response.ok) throw new Error("Failed to fetch data");
  return await response.json();
};


---

✅ 3. DataTable.css – CSS Styling

/* src/styles/DataTable.css */

.table-wrapper {
  padding: 20px;
  font-family: Arial, sans-serif;
}

.table-title {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 20px;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

.data-table th,
.data-table td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: left;
}

.data-table th {
  background-color: #f4f4f4;
}

.download-btn {
  background-color: #007bff;
  color: white;
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.download-btn:hover {
  background-color: #0056b3;
}


---

✅ 4. App.jsx – Main App File

// src/App.jsx
import React from "react";
import DataTable from "./components/DataTable";

const App = () => {
  return (
    <div>
      <DataTable />
    </div>
  );
};

export default App;


---

✅ Folder Structure

src/
│
├── components/
│   └── DataTable.jsx
│
├── services/
│   └── api.js
│
├── styles/
│   └── DataTable.css
│
└── App.jsx


---

Want help connecting this with a real API or setting up CSV/PDF download in different formats (like Excel or JSON)?

