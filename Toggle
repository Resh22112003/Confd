// src/components/FilterForm.js import React, { useState } from 'react'; import '../styles/FilterForm.css'; import { postFilterData, getFilterData } from '../services/api';

const FilterForm = () => { const [formData, setFormData] = useState({ neid: '', time: '15 min', calendar: '', startHour: '1', endHour: '2', startMin: '1', endMin: '1', portNumber: '', monType: '' });

const [showTimestamp, setShowTimestamp] = useState(false); const [showPortNumber, setShowPortNumber] = useState(false); const [showMonType, setShowMonType] = useState(false); const [fetchedData, setFetchedData] = useState(null);

const startHours = Array.from({ length: 23 }, (, i) => i + 1); const endHours = Array.from({ length: 23 }, (, i) => i + 2); const minutes = Array.from({ length: 15 }, (_, i) => i + 1);

const handleChange = (e) => { const { name, value } = e.target; setFormData((prev) => ({ ...prev, [name]: value })); };

const handleSubmit = async (e) => { e.preventDefault(); try { const response = await postFilterData(formData); console.log('POST response:', response); } catch (error) { console.error('POST error:', error); } };

const handleFetch = async () => { try { const response = await getFilterData(); setFetchedData(response); console.log('GET response:', response); } catch (error) { console.error('GET error:', error); } };

return ( <form className="form-container" onSubmit={handleSubmit}> <div className="form-group"> <label className="label-bold">Neid:</label> <input type="text" name="neid" value={formData.neid} onChange={handleChange} className="input-box" /> </div>

<div className="form-group">
    <label className="label-bold">Time:</label>
    <select name="time" value={formData.time} onChange={handleChange} className="input-box">
      <option value="15 min">15 min</option>
      <option value="24 hrs">24 hrs</option>
    </select>
  </div>

  <h3 className="section-title">Filter</h3>

  <label><input type="checkbox" onChange={() => setShowTimestamp(!showTimestamp)} /> Timestamp</label>
  {showTimestamp && (
    <>
      <input type="date" name="calendar" value={formData.calendar} onChange={handleChange} className="input-box" />

      {formData.time === '24 hrs' && (
        <div className="row-group">
          <label>Start Hour:</label>
          <select name="startHour" value={formData.startHour} onChange={handleChange} className="input-small">
            {startHours.map((hr) => <option key={hr} value={hr}>{hr}</option>)}
          </select>

          <label>End Hour:</label>
          <select name="endHour" value={formData.endHour} onChange={handleChange} className="input-small">
            {endHours.map((hr) => <option key={hr} value={hr}>{hr}</option>)}
          </select>
        </div>
      )}

      {formData.time === '15 min' && (
        <div className="row-group">
          <label>Start Min:</label>
          <select name="startMin" value={formData.startMin} onChange={handleChange} className="input-small">
            {minutes.map((min) => <option key={min} value={min}>{min}</option>)}
          </select>

          <label>End Min:</label>
          <select name="endMin" value={formData.endMin} onChange={handleChange} className="input-small">
            {minutes.map((min) => <option key={min} value={min}>{min}</option>)}
          </select>
        </div>
      )}
    </>
  )}

  <label><input type="checkbox" onChange={() => setShowPortNumber(!showPortNumber)} /> Port Number</label>
  {showPortNumber && (
    <input type="text" name="portNumber" value={formData.portNumber} onChange={handleChange} className="input-box" />
  )}

  <label><input type="checkbox" onChange={() => setShowMonType(!showMonType)} /> Mon Type</label>
  {showMonType && (
    <input type="text" name="monType" value={formData.monType} onChange={handleChange} className="input-box" />
  )}

  <button type="submit" className="submit-button">Submit</button>
  <button type="button" onClick={handleFetch} className="submit-button" style={{ marginLeft: '1rem' }}>
    Fetch Data
  </button>

  {fetchedData && (
    <pre className="data-output">{JSON.stringify(fetchedData, null, 2)}</pre>
  )}
</form>

); };

export default FilterForm;

